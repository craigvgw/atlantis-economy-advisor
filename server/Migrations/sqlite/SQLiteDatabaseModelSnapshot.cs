// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using advisor.Persistence;

namespace advisor.Migrations.sqlite
{
    [DbContext(typeof(SQLiteDatabase))]
    partial class SQLiteDatabaseModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("advisor.Persistence.DbAlliance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Alliances");
                });

            modelBuilder.Entity("advisor.Persistence.DbAllianceMember", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AllianceId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanInvite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Owner")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShareMap")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TeachMages")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlayerId", "AllianceId");

                    b.HasIndex("AllianceId");

                    b.ToTable("AllianceMembers");
                });

            modelBuilder.Entity("advisor.Persistence.DbAttitude", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FactionNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TargetFactionNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Stance")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PlayerId", "TurnNumber", "FactionNumber", "TargetFactionNumber");

                    b.ToTable("Attitudes");
                });

            modelBuilder.Entity("advisor.Persistence.DbEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FactionNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemCode")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ItemPrice")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("MissingUnitNumber")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RegionId")
                        .HasMaxLength(14)
                        .HasColumnType("TEXT");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UnitName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UnitNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId", "TurnNumber", "FactionNumber");

                    b.HasIndex("PlayerId", "TurnNumber", "RegionId");

                    b.HasIndex("PlayerId", "TurnNumber", "UnitNumber");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("advisor.Persistence.DbExit", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OriginRegionId")
                        .HasMaxLength(14)
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetRegionId")
                        .HasMaxLength(14)
                        .HasColumnType("TEXT");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Terrain")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("X")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Y")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Z")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlayerId", "TurnNumber", "OriginRegionId", "TargetRegionId");

                    b.HasIndex("PlayerId", "TurnNumber", "TargetRegionId");

                    b.ToTable("Exits");
                });

            modelBuilder.Entity("advisor.Persistence.DbFaction", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DefaultAttitude")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("PlayerId", "TurnNumber", "Number");

                    b.ToTable("Factions");
                });

            modelBuilder.Entity("advisor.Persistence.DbGame", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Engine")
                        .HasColumnType("BLOB");

                    b.Property<string>("EngineVersion")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Options")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Ruleset")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RulesetName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("RulesetVersion")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("advisor.Persistence.DbGameArticle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GameId", "TurnNumber");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("advisor.Persistence.DbGameTurn", b =>
                {
                    b.Property<long>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("GameData")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PlayerData")
                        .HasColumnType("BLOB");

                    b.HasKey("GameId", "Number");

                    b.ToTable("GameTurns");
                });

            modelBuilder.Entity("advisor.Persistence.DbMarketItem", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RegionId")
                        .HasMaxLength(14)
                        .HasColumnType("TEXT");

                    b.Property<string>("Market")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlayerId", "TurnNumber", "RegionId", "Market", "Code");

                    b.ToTable("Markets");
                });

            modelBuilder.Entity("advisor.Persistence.DbPlayer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsQuit")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LastTurnNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("advisor.Persistence.DbProductionItem", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RegionId")
                        .HasMaxLength(14)
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlayerId", "TurnNumber", "RegionId", "Code");

                    b.ToTable("Production");
                });

            modelBuilder.Entity("advisor.Persistence.DbRegion", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Id")
                        .HasMaxLength(14)
                        .HasColumnType("TEXT");

                    b.Property<int>("Entertainment")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Explored")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("LastVisitedAt")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Population")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Race")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("Tax")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Terrain")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalWages")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Wages")
                        .HasColumnType("REAL");

                    b.Property<int>("X")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Y")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Z")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlayerId", "TurnNumber", "Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("advisor.Persistence.DbReport", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FactionNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FactionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Json")
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PlayerId", "TurnNumber", "FactionNumber");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("advisor.Persistence.DbStat", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RegionId")
                        .HasMaxLength(14)
                        .HasColumnType("TEXT");

                    b.HasKey("PlayerId", "TurnNumber", "RegionId");

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("advisor.Persistence.DbStatItem", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RegionId")
                        .HasMaxLength(14)
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlayerId", "TurnNumber", "RegionId", "Code");

                    b.ToTable("StatItems");
                });

            modelBuilder.Entity("advisor.Persistence.DbStructure", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Id")
                        .HasMaxLength(24)
                        .HasColumnType("TEXT");

                    b.Property<string>("Contents")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Flags")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Needs")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RegionId")
                        .HasMaxLength(14)
                        .HasColumnType("TEXT");

                    b.Property<string>("SailDirections")
                        .HasColumnType("TEXT");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Speed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("X")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Y")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Z")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlayerId", "TurnNumber", "Id");

                    b.HasIndex("PlayerId", "TurnNumber", "RegionId");

                    b.ToTable("Structures");
                });

            modelBuilder.Entity("advisor.Persistence.DbStudyPlan", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnitNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Study")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Teach")
                        .HasColumnType("TEXT");

                    b.HasKey("PlayerId", "TurnNumber", "UnitNumber");

                    b.ToTable("StudyPlans");
                });

            modelBuilder.Entity("advisor.Persistence.DbTurn", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Month")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Ready")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlayerId", "Number");

                    b.ToTable("Turns");
                });

            modelBuilder.Entity("advisor.Persistence.DbUnit", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CanStudy")
                        .HasColumnType("TEXT");

                    b.Property<string>("CombatSpell")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("FactionNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Flags")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("OnGuard")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Orders")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReadyItem")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<string>("RegionId")
                        .HasMaxLength(14)
                        .HasColumnType("TEXT");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Skills")
                        .HasColumnType("TEXT");

                    b.Property<string>("StrcutureId")
                        .HasMaxLength(24)
                        .HasColumnType("TEXT");

                    b.Property<int?>("StructureNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Weight")
                        .HasColumnType("INTEGER");

                    b.Property<int>("X")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Y")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Z")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlayerId", "TurnNumber", "Number");

                    b.HasIndex("PlayerId", "TurnNumber", "FactionNumber");

                    b.HasIndex("PlayerId", "TurnNumber", "RegionId");

                    b.HasIndex("PlayerId", "TurnNumber", "StrcutureId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("advisor.Persistence.DbUnitItem", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnitNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlayerId", "TurnNumber", "UnitNumber", "Code");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("advisor.Persistence.DbUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Digest")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Roles")
                        .HasColumnType("TEXT");

                    b.Property<string>("Salt")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("advisor.Persistence.DbAlliance", b =>
                {
                    b.HasOne("advisor.Persistence.DbGame", "Game")
                        .WithMany("Alliances")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("advisor.Persistence.DbAllianceMember", b =>
                {
                    b.HasOne("advisor.Persistence.DbAlliance", "Alliance")
                        .WithMany("Members")
                        .HasForeignKey("AllianceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbPlayer", "Player")
                        .WithMany("AllianceMembererships")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alliance");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("advisor.Persistence.DbAttitude", b =>
                {
                    b.HasOne("advisor.Persistence.DbTurn", "Turn")
                        .WithMany("Attitudes")
                        .HasForeignKey("PlayerId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbFaction", "Faction")
                        .WithMany("Attitudes")
                        .HasForeignKey("PlayerId", "TurnNumber", "FactionNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faction");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("advisor.Persistence.DbEvent", b =>
                {
                    b.HasOne("advisor.Persistence.DbTurn", "Turn")
                        .WithMany("Events")
                        .HasForeignKey("PlayerId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbFaction", "Faction")
                        .WithMany("Events")
                        .HasForeignKey("PlayerId", "TurnNumber", "FactionNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbRegion", "Region")
                        .WithMany("Events")
                        .HasForeignKey("PlayerId", "TurnNumber", "RegionId");

                    b.HasOne("advisor.Persistence.DbUnit", "Unit")
                        .WithMany("Events")
                        .HasForeignKey("PlayerId", "TurnNumber", "UnitNumber");

                    b.Navigation("Faction");

                    b.Navigation("Region");

                    b.Navigation("Turn");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("advisor.Persistence.DbExit", b =>
                {
                    b.HasOne("advisor.Persistence.DbTurn", "Turn")
                        .WithMany("Exits")
                        .HasForeignKey("PlayerId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbRegion", "Origin")
                        .WithMany("Exits")
                        .HasForeignKey("PlayerId", "TurnNumber", "OriginRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbRegion", "Target")
                        .WithMany()
                        .HasForeignKey("PlayerId", "TurnNumber", "TargetRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("advisor.Persistence.DbSettlement", "Settlement", b1 =>
                        {
                            b1.Property<long>("DbExitPlayerId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("DbExitTurnNumber")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("DbExitOriginRegionId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("DbExitTargetRegionId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Name")
                                .HasMaxLength(256)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Size")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("DbExitPlayerId", "DbExitTurnNumber", "DbExitOriginRegionId", "DbExitTargetRegionId");

                            b1.ToTable("Exits");

                            b1.WithOwner()
                                .HasForeignKey("DbExitPlayerId", "DbExitTurnNumber", "DbExitOriginRegionId", "DbExitTargetRegionId");
                        });

                    b.Navigation("Origin");

                    b.Navigation("Settlement");

                    b.Navigation("Target");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("advisor.Persistence.DbFaction", b =>
                {
                    b.HasOne("advisor.Persistence.DbTurn", "Turn")
                        .WithMany("Factions")
                        .HasForeignKey("PlayerId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("advisor.Persistence.DbGameArticle", b =>
                {
                    b.HasOne("advisor.Persistence.DbGame", "Game")
                        .WithMany("Articles")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbGameTurn", "Turn")
                        .WithMany("Articles")
                        .HasForeignKey("GameId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("advisor.Persistence.DbGameTurn", b =>
                {
                    b.HasOne("advisor.Persistence.DbGame", "Game")
                        .WithMany("Turns")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("advisor.Persistence.DbMarketItem", b =>
                {
                    b.HasOne("advisor.Persistence.DbTurn", null)
                        .WithMany("Markets")
                        .HasForeignKey("PlayerId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbRegion", "Region")
                        .WithMany("Markets")
                        .HasForeignKey("PlayerId", "TurnNumber", "RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("advisor.Persistence.DbPlayer", b =>
                {
                    b.HasOne("advisor.Persistence.DbGame", "Game")
                        .WithMany("Players")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbUser", "User")
                        .WithMany("Players")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("advisor.Persistence.DbProductionItem", b =>
                {
                    b.HasOne("advisor.Persistence.DbTurn", null)
                        .WithMany("Production")
                        .HasForeignKey("PlayerId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbRegion", "Region")
                        .WithMany("Produces")
                        .HasForeignKey("PlayerId", "TurnNumber", "RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("advisor.Persistence.DbRegion", b =>
                {
                    b.HasOne("advisor.Persistence.DbTurn", "Turn")
                        .WithMany("Regions")
                        .HasForeignKey("PlayerId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("advisor.Persistence.DbSettlement", "Settlement", b1 =>
                        {
                            b1.Property<long>("DbRegionPlayerId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("DbRegionTurnNumber")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("DbRegionId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Name")
                                .HasMaxLength(256)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Size")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("DbRegionPlayerId", "DbRegionTurnNumber", "DbRegionId");

                            b1.ToTable("Regions");

                            b1.WithOwner()
                                .HasForeignKey("DbRegionPlayerId", "DbRegionTurnNumber", "DbRegionId");
                        });

                    b.Navigation("Settlement");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("advisor.Persistence.DbReport", b =>
                {
                    b.HasOne("advisor.Persistence.DbPlayer", "Player")
                        .WithMany("Reports")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbTurn", "Turn")
                        .WithMany("Reports")
                        .HasForeignKey("PlayerId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("advisor.Persistence.DbStat", b =>
                {
                    b.HasOne("advisor.Persistence.DbTurn", "Turn")
                        .WithMany("Stats")
                        .HasForeignKey("PlayerId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbRegion", "Region")
                        .WithMany("Stats")
                        .HasForeignKey("PlayerId", "TurnNumber", "RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("advisor.Persistence.DbIncomeStats", "Income", b1 =>
                        {
                            b1.Property<long>("DbStatPlayerId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("DbStatTurnNumber")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("DbStatRegionId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Pillage")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Tax")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Trade")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Work")
                                .HasColumnType("INTEGER");

                            b1.HasKey("DbStatPlayerId", "DbStatTurnNumber", "DbStatRegionId");

                            b1.ToTable("Stats");

                            b1.WithOwner()
                                .HasForeignKey("DbStatPlayerId", "DbStatTurnNumber", "DbStatRegionId");
                        });

                    b.Navigation("Income");

                    b.Navigation("Region");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("advisor.Persistence.DbStatItem", b =>
                {
                    b.HasOne("advisor.Persistence.DbRegion", "Region")
                        .WithMany()
                        .HasForeignKey("PlayerId", "TurnNumber", "RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbStat", "Stat")
                        .WithMany("Production")
                        .HasForeignKey("PlayerId", "TurnNumber", "RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");

                    b.Navigation("Stat");
                });

            modelBuilder.Entity("advisor.Persistence.DbStructure", b =>
                {
                    b.HasOne("advisor.Persistence.DbTurn", "Turn")
                        .WithMany("Structures")
                        .HasForeignKey("PlayerId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbRegion", "Region")
                        .WithMany("Structures")
                        .HasForeignKey("PlayerId", "TurnNumber", "RegionId");

                    b.OwnsOne("advisor.Persistence.DbSailors", "Sailors", b1 =>
                        {
                            b1.Property<long>("DbStructurePlayerId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("DbStructureTurnNumber")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("DbStructureId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Current")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Required")
                                .HasColumnType("INTEGER");

                            b1.HasKey("DbStructurePlayerId", "DbStructureTurnNumber", "DbStructureId");

                            b1.ToTable("Structures");

                            b1.WithOwner()
                                .HasForeignKey("DbStructurePlayerId", "DbStructureTurnNumber", "DbStructureId");
                        });

                    b.OwnsOne("advisor.Persistence.DbTransportationLoad", "Load", b1 =>
                        {
                            b1.Property<long>("DbStructurePlayerId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("DbStructureTurnNumber")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("DbStructureId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Max")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Used")
                                .HasColumnType("INTEGER");

                            b1.HasKey("DbStructurePlayerId", "DbStructureTurnNumber", "DbStructureId");

                            b1.ToTable("Structures");

                            b1.WithOwner()
                                .HasForeignKey("DbStructurePlayerId", "DbStructureTurnNumber", "DbStructureId");
                        });

                    b.Navigation("Load");

                    b.Navigation("Region");

                    b.Navigation("Sailors");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("advisor.Persistence.DbStudyPlan", b =>
                {
                    b.HasOne("advisor.Persistence.DbTurn", "Turn")
                        .WithMany("Plans")
                        .HasForeignKey("PlayerId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbUnit", "Unit")
                        .WithOne("StudyPlan")
                        .HasForeignKey("advisor.Persistence.DbStudyPlan", "PlayerId", "TurnNumber", "UnitNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("advisor.Persistence.DbSkill", "Target", b1 =>
                        {
                            b1.Property<long>("DbStudyPlanPlayerId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("DbStudyPlanTurnNumber")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("DbStudyPlanUnitNumber")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Code")
                                .HasMaxLength(8)
                                .HasColumnType("TEXT");

                            b1.Property<int?>("Level")
                                .HasColumnType("INTEGER");

                            b1.HasKey("DbStudyPlanPlayerId", "DbStudyPlanTurnNumber", "DbStudyPlanUnitNumber");

                            b1.ToTable("StudyPlans");

                            b1.WithOwner()
                                .HasForeignKey("DbStudyPlanPlayerId", "DbStudyPlanTurnNumber", "DbStudyPlanUnitNumber");
                        });

                    b.Navigation("Target");

                    b.Navigation("Turn");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("advisor.Persistence.DbTurn", b =>
                {
                    b.HasOne("advisor.Persistence.DbPlayer", "Player")
                        .WithMany("Turns")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("advisor.Persistence.DbUnit", b =>
                {
                    b.HasOne("advisor.Persistence.DbTurn", "Turn")
                        .WithMany("Units")
                        .HasForeignKey("PlayerId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbFaction", "Faction")
                        .WithMany("Units")
                        .HasForeignKey("PlayerId", "TurnNumber", "FactionNumber");

                    b.HasOne("advisor.Persistence.DbRegion", "Region")
                        .WithMany("Units")
                        .HasForeignKey("PlayerId", "TurnNumber", "RegionId");

                    b.HasOne("advisor.Persistence.DbStructure", "Structure")
                        .WithMany("Units")
                        .HasForeignKey("PlayerId", "TurnNumber", "StrcutureId");

                    b.OwnsOne("advisor.Persistence.DbCapacity", "Capacity", b1 =>
                        {
                            b1.Property<long>("DbUnitPlayerId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("DbUnitTurnNumber")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("DbUnitNumber")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Flying")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Riding")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Swimming")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Walking")
                                .HasColumnType("INTEGER");

                            b1.HasKey("DbUnitPlayerId", "DbUnitTurnNumber", "DbUnitNumber");

                            b1.ToTable("Units");

                            b1.WithOwner()
                                .HasForeignKey("DbUnitPlayerId", "DbUnitTurnNumber", "DbUnitNumber");
                        });

                    b.Navigation("Capacity");

                    b.Navigation("Faction");

                    b.Navigation("Region");

                    b.Navigation("Structure");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("advisor.Persistence.DbUnitItem", b =>
                {
                    b.HasOne("advisor.Persistence.DbTurn", null)
                        .WithMany("Items")
                        .HasForeignKey("PlayerId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbUnit", "Unit")
                        .WithMany("Items")
                        .HasForeignKey("PlayerId", "TurnNumber", "UnitNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("advisor.Persistence.DbAlliance", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("advisor.Persistence.DbFaction", b =>
                {
                    b.Navigation("Attitudes");

                    b.Navigation("Events");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("advisor.Persistence.DbGame", b =>
                {
                    b.Navigation("Alliances");

                    b.Navigation("Articles");

                    b.Navigation("Players");

                    b.Navigation("Turns");
                });

            modelBuilder.Entity("advisor.Persistence.DbGameTurn", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("advisor.Persistence.DbPlayer", b =>
                {
                    b.Navigation("AllianceMembererships");

                    b.Navigation("Reports");

                    b.Navigation("Turns");
                });

            modelBuilder.Entity("advisor.Persistence.DbRegion", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Exits");

                    b.Navigation("Markets");

                    b.Navigation("Produces");

                    b.Navigation("Stats");

                    b.Navigation("Structures");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("advisor.Persistence.DbStat", b =>
                {
                    b.Navigation("Production");
                });

            modelBuilder.Entity("advisor.Persistence.DbStructure", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("advisor.Persistence.DbTurn", b =>
                {
                    b.Navigation("Attitudes");

                    b.Navigation("Events");

                    b.Navigation("Exits");

                    b.Navigation("Factions");

                    b.Navigation("Items");

                    b.Navigation("Markets");

                    b.Navigation("Plans");

                    b.Navigation("Production");

                    b.Navigation("Regions");

                    b.Navigation("Reports");

                    b.Navigation("Stats");

                    b.Navigation("Structures");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("advisor.Persistence.DbUnit", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Items");

                    b.Navigation("StudyPlan");
                });

            modelBuilder.Entity("advisor.Persistence.DbUser", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
