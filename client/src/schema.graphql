"""
The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`.
"""
directive @defer(
  """Deferred when true."""
  if: Boolean

  """
  If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to.
  """
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`.
"""
directive @stream(
  """Streamed when true."""
  if: Boolean

  """The initial elements that shall be send down to the consumer."""
  initialCount: Int!

  """
  If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to.
  """
  label: String
) on FIELD

type Alliance implements Node {
  id: ID!
  members: [AllianceMember]
  name: String!
}

type AllianceCreateResult {
  alliance: Alliance
  error: String
  isSuccess: Boolean!
}

type AllianceJoinResult {
  alliance: Alliance
  error: String
  isSuccess: Boolean!
  membership: AllianceMember
}

type AllianceMember {
  canInvite: Boolean!
  name: String
  number: Int
  owner: Boolean!
  shareMap: Boolean!
  teachMages: Boolean!
  turn(number: Int!): AllianceMemberTurn
  turns: [AllianceMemberTurn]
}

type AllianceMemberTurn {
  number: Int!
  stats: Statistics
  units(filter: UnitsFilterInput, skip: Int, take: Int): UnitCollectionSegment
}

enum ApplyPolicy {
  AFTER_RESOLVER
  BEFORE_RESOLVER
}

type Attitude {
  factionNumber: Int!
  stance: Stance!
}

type AuthorizeDirective {
  apply: ApplyPolicy!
  policy: String
  roles: [String!]
}

type Battle {
  attacker: Participant
  attackers: [BattleUnit]
  casualties: [Casualties]
  defender: Participant
  defenders: [BattleUnit]
  location: Location
  rose: [Item]
  rounds: [BattleRound]
  spoils: [Item]
  statistics: String
}

type BattleFaction {
  name: String
  number: Int!
}

type BattleRound {
  log: String
  statistics: String
}

type BattleSkill {
  level: Int!
  name: String
}

type BattleUnit {
  description: String
  faction: BattleFaction
  flags: [String]
  items: [Item]
  name: String
  number: Int!
  skills: [BattleSkill]
}

type Capacity {
  flying: Int!
  riding: Int!
  swimming: Int!
  walking: Int!
}

type Casualties {
  army: Participant
  damagedUnits: [Int!]
  lost: Int!
}

"""Information about the offset pagination."""
type CollectionSegmentInfo {
  """
  Indicates whether more items exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more items exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!
}

type Coords {
  label: String
  x: Int!
  y: Int!
  z: Int!
}

"""The `DateTime` scalar represents an ISO-8601 compliant date time type."""
scalar DateTime

enum Direction {
  NORTH
  NORTHEAST
  NORTHWEST
  SOUTH
  SOUTHEAST
  SOUTHWEST
}

type Event {
  amount: Int
  category: EventCategory!
  factionNumber: Int!
  id: Long!
  itemCode: String
  itemName: String
  itemPrice: Int
  message: String!
  regionCode: String
  type: EventType!
  unitName: String
  unitNumber: Int
}

enum EventCategory {
  CAST
  CLAIM
  PILLAGE
  PRODUCE
  SELL
  TAX
  UNKNOWN
  WORK
}

type EventCollectionSegment {
  items: [Event]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

enum EventType {
  BATTLE
  ERROR
  INFO
}

type Exit {
  direction: Direction!
  label: String!
  province: String!
  settlement: Settlement
  targetRegion: String!
  terrain: String!
  x: Int!
  y: Int!
  z: Int!
}

type Faction implements Node {
  attitudes: [Attitude]
  defaultAttitude: Stance
  events: [Event]
  id: ID!
  name: String!
  number: Int!
}

type FleetContent {
  count: Int!
  type: String
}

type Game implements Node {
  createdAt: DateTime!
  finished: Boolean!
  id: ID!
  lastTurnNumber: Int
  me: Player
  name: String!
  nextTurnNumber: Int
  options: GameOptions!
  players(skip: Int, take: Int): PlayerCollectionSegment
  ruleset: String!
  type: GameType!
}

type GameCollectionSegment {
  items: [Game]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type GameCreateLocalResult {
  error: String
  game: Game
  isSuccess: Boolean!
}

type GameCreateRemoteResult {
  error: String
  game: Game
  isSuccess: Boolean!
}

type GameEngine implements Node {
  createdAt: DateTime!
  id: ID!
  name: String!
}

type GameEngineCollectionSegment {
  items: [GameEngine]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type GameEngineCreateResult {
  engine: GameEngine
  error: String
  isSuccess: Boolean!
}

type GameOptions {
  finishAt: DateTime
  map: [MapLevel]
  schedule: String
  serverAddress: String
  startAt: DateTime
  timeZone: String
}

input GameOptionsInput {
  finishAt: DateTime
  map: [MapLevelInput]
  schedule: String
  serverAddress: String
  startAt: DateTime
  timeZone: String
}

type GameScheduleSetResult {
  error: String
  game: Game
  isSuccess: Boolean!
}

type GameTurnRunResult {
  error: String
  isSuccess: Boolean!
}

enum GameType {
  LOCAL
  REMOTE
}

type IncomeStats {
  pillage: Int!
  tax: Int!
  total: Int!
  trade: Int!
  work: Int!
}

type Item {
  amount: Int!
  code: String
}

type Location {
  coords: Coords
  province: String
  terrain: String
}

"""
The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type MapLevel {
  height: Int!
  label: String
  level: Int!
  width: Int!
}

input MapLevelInput {
  height: Int!
  label: String
  level: Int!
  width: Int!
}

enum Market {
  FOR_SALE
  WANTED
}

type Mutation {
  allianceCreate(name: String, playerId: ID!): AllianceCreateResult
  allianceJoin(allianceId: ID!, playerId: ID!): AllianceJoinResult
  createUser(email: String, password: String): User
  gameCreateLocal(gameData: Upload, gameEngineId: ID!, name: String, options: GameOptionsInput, playerData: Upload): GameCreateLocalResult
  gameCreateRemote(name: String, options: GameOptionsInput): GameCreateRemoteResult
  gameDelete(gameId: ID!): [Game]
  gameEngineCreate(file: Upload, name: String): GameEngineCreateResult
  gameJoin(gameId: ID!): Player
  gameOptionsSet(gameId: ID!, options: GameOptionsInput): Game
  gameScheduleSet(gameId: ID!, schedule: String): GameScheduleSetResult
  gameTurnRun(gameId: ID!): GameTurnRunResult
  playerQuit(playerId: ID!): PlayerQuitResult
  setOrders(orders: String, unitId: ID): MutationResultOfString
  studyPlanStudy(skill: String, unitId: ID): StudyPlanResult
  studyPlanTarget(level: Int!, skill: String, unitId: ID): StudyPlanResult
  studyPlanTeach(unitId: ID, units: [Int!]): StudyPlanResult
  turnReProcess(gameId: ID!, turn: Int!): TurnReProcessResult
  updateUserRoles(add: [String], remove: [String], userId: ID!): User
}

type MutationResultOfString {
  data: String
  error: String
  isSuccess: Boolean!
}

"""
The node interface is implemented by entities that have a global unique identifier.
"""
interface Node {
  id: ID!
}

type Participant {
  name: String
  number: Int!
}

type Player implements Node {
  alliance: Alliance
  game: Game
  id: ID!
  isQuit: Boolean!
  lastTurnId: String
  lastTurnNumber: Int!
  name: String
  number: Int
  password: String
  reports(turn: Int): [Report]
  turn(number: Int!): Turn
  turns: [Turn]
}

type PlayerCollectionSegment {
  items: [Player]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type PlayerQuitResult {
  error: String
  isSuccess: Boolean!
}

type Query {
  gameEngines(skip: Int, take: Int): GameEngineCollectionSegment
  games(skip: Int, take: Int): GameCollectionSegment
  me: User

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  users(skip: Int, take: Int): UserCollectionSegment
}

type Region implements Node {
  entertainment: Int!
  exits: [Exit]
  explored: Boolean!
  forSale: [TradableItem]
  gate: Int
  id: ID!
  label: String!
  lastVisitedAt: Int
  population: Int!
  produces: [Item]
  province: String!
  race: String
  settlement: Settlement
  structures: [Structure]
  tax: Int!
  terrain: String!
  totalWages: Int!
  wages: Float!
  wanted: [TradableItem]
  x: Int!
  y: Int!
  z: Int!
}

type RegionCollectionSegment {
  items: [Region]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type Report implements Node {
  factionName: String!
  factionNumber: Int!
  id: ID!
  json: String
  source: String!
}

type Sailors {
  current: Int!
  required: Int!
}

type Settlement {
  name: String
  size: SettlementSize!
}

enum SettlementSize {
  CITY
  TOWN
  VILLAGE
}

type Skill {
  code: String
  days: Int
  level: Int
}

enum Stance {
  ALLY
  FRIENDLY
  HOSTILE
  NEUTRAL
  UNFRIENDLY
}

type Statistics {
  income: IncomeStats
  production: [Item]
}

type Structure implements Node {
  contents: [FleetContent]
  description: String
  flags: [String]
  id: ID!
  load: TransportationLoad
  name: String!
  needs: Int
  number: Int!
  sailDirections: [Direction!]
  sailors: Sailors
  sequence: Int!
  speed: Int
  type: String!
  x: Int!
  y: Int!
  z: Int!
}

type StructureCollectionSegment {
  items: [Structure]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type StudyPlan {
  study: String
  target: Skill
  teach: [Int!]
  unitNumber: Int!
}

type StudyPlanResult {
  error: String
  isSuccess: Boolean!
  studyPlan: StudyPlan
}

type TradableItem {
  amount: Int!
  code: String!
  market: Market!
  price: Int!
}

type TransportationLoad {
  max: Int!
  used: Int!
}

type Turn implements Node {
  battles: [Battle]
  events(skip: Int, take: Int): EventCollectionSegment
  factions: [Faction]
  id: ID!
  month: Int!
  number: Int!
  ready: Boolean!
  regions(skip: Int, take: Int, withStructures: Boolean! = false): RegionCollectionSegment
  reports: [Report]
  stats: Statistics
  structures(skip: Int, take: Int): StructureCollectionSegment
  studyPlans: [StudyPlan]
  units(filter: UnitsFilterInput, skip: Int, take: Int): UnitCollectionSegment
  year: Int!
}

type TurnReProcessResult {
  error: String
  isSuccess: Boolean!
}

type Unit implements Node {
  canStudy: [String]
  capacity: Capacity
  combatSpell: String
  description: String
  factionNumber: Int
  flags: [String]
  id: ID!
  items: [Item]!
  name: String!
  number: Int!
  onGuard: Boolean!
  orders: String
  readyItem: String
  sequence: Int!
  skills: [Skill]
  structureNumber: Int
  studyPlan: StudyPlan
  weight: Int
  x: Int!
  y: Int!
  z: Int!
}

type UnitCollectionSegment {
  items: [Unit]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input UnitsFilterInput {
  mages: Boolean
  own: Boolean
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User implements Node {
  email: String!
  id: ID!
  players: [Player]
  roles: [String]
}

type UserCollectionSegment {
  items: [User]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}